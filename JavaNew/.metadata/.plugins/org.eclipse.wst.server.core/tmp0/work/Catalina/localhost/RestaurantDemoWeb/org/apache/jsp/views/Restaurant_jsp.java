/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-06-25 06:37:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Restaurant_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1718368050773L));
    _jspx_dependants.put("jar:file:/D:/FileCode/Java/JavaNew/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/RestaurantDemoWeb/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602848772000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Restaurant Order</title>\r\n");
      out.write(" <style>\r\n");
      out.write("     body {\r\n");
      out.write("        font-family: Arial, sans-serif;\r\n");
      out.write("        margin: 0 100px; /* Thụt lề vào 100px ở cả hai bên */\r\n");
      out.write("        padding: 0;\r\n");
      out.write("        background-color: #f9f9f9;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .header {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: space-between;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("        padding: 20px 0;\r\n");
      out.write("        border-bottom: 1px solid #ddd;\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .header h1 {\r\n");
      out.write("        margin: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .header .auth-buttons {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        gap: 10px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .header .auth-buttons a {\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        color: #fff;\r\n");
      out.write("        background: linear-gradient(to bottom right, #098c53, #246861);\r\n");
      out.write("        padding: 10px 20px;\r\n");
      out.write("        border-radius: 4px;\r\n");
      out.write("        transition: background-color 0.3s;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .header .auth-buttons a:hover {\r\n");
      out.write("        background: linear-gradient(to bottom right, #0a7547, #205950);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h2 {\r\n");
      out.write("        margin-top: 20px;\r\n");
      out.write("        color: #333;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    table {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    table, th, td {\r\n");
      out.write("        border: 1px solid #ddd;\r\n");
      out.write("        padding: 8px;\r\n");
      out.write("        text-align: left;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    th {\r\n");
      out.write("        background-color: #f2f2f2;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"], input[type=\"number\"] {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        padding: 6px 10px;\r\n");
      out.write("        margin: 5px 0;\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button {\r\n");
      out.write("        background: linear-gradient(to bottom right, #098c53, #246861);\r\n");
      out.write("        color: white;\r\n");
      out.write("        padding: 10px 20px;\r\n");
      out.write("        border: none;\r\n");
      out.write("        border-radius: 4px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        font-size: 16px;\r\n");
      out.write("        transition: background-color 0.3s;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button:hover {\r\n");
      out.write("        background: linear-gradient(to bottom right, #0a7547, #205950);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .add-btn-container {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .quantity-input {\r\n");
      out.write("        width: 50px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-container {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    form {\r\n");
      out.write("        width: 40%; /* Kích thước bằng 2/5 của trang */\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("        border-radius: 8px;\r\n");
      out.write("        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .receipt-input {\r\n");
      out.write("        margin-bottom: 15px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .submit-btn-container {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    .logout-btn {\r\n");
      out.write("        background: linear-gradient(to bottom right, #d9534f, #c9302c);\r\n");
      out.write("        color: white;\r\n");
      out.write("        border: none;\r\n");
      out.write("        padding: 10px 20px;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        position: fixed;\r\n");
      out.write("        bottom: 20px;\r\n");
      out.write("        right: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .logout-btn:hover {\r\n");
      out.write("        background: linear-gradient(to bottom right, #c9302c, #ac2925);\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    .search-bar {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: space-between;\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("        gap: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    .search-bar input {\r\n");
      out.write("        padding: 10px;\r\n");
      out.write("        border: 1px solid #ccc;\r\n");
      out.write("        border-radius: 4px;\r\n");
      out.write("        flex-grow: 1;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    .search-bar button {\r\n");
      out.write("        padding: 10px 20px;\r\n");
      out.write("        flex-grow: 0;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"header\">\r\n");
      out.write("        <h1>Restaurant Order</h1>\r\n");
      out.write("        <div class=\"auth-buttons\">\r\n");
      out.write("            <a href=\"Login\">Login</a>\r\n");
      out.write("            <a href=\"Register\">Register</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("        <!-- Hiển thị tên khách hàng từ session -->\r\n");
      out.write("    <h2>Welcome ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.customerName}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("!</h2>\r\n");
      out.write("    \r\n");
      out.write("        <div class=\"search-bar\">\r\n");
      out.write("        <input type=\"text\" id=\"productName\" placeholder=\"Product Name\">\r\n");
      out.write("        <input type=\"text\" id=\"productType\" placeholder=\"Product Type\">\r\n");
      out.write("        <input type=\"number\" id=\"minPrice\" placeholder=\"Min Price\">\r\n");
      out.write("        <input type=\"number\" id=\"maxPrice\" placeholder=\"Max Price\">\r\n");
      out.write("        <button onclick=\"filterProducts()\">Search</button>\r\n");
      out.write("        <button onclick=\"resetProducts()\">Cancel</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    <table id=\"productTable\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>ProdId</th>\r\n");
      out.write("            <th>Name Product</th>\r\n");
      out.write("            <th>Price</th>\r\n");
      out.write("            <th>Type</th>\r\n");
      out.write("            <th>Stock</th>\r\n");
      out.write("            <th>Quantity</th>\r\n");
      out.write("            <th></th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <h2>Cart</h2>\r\n");
      out.write("\r\n");
      out.write("    <table id=\"cartTable\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Prod ID</th>\r\n");
      out.write("            <th>Product Name</th>\r\n");
      out.write("            <th>Type</th>\r\n");
      out.write("            <th>Quantity</th>\r\n");
      out.write("            <th>Price</th>\r\n");
      out.write("            <th></th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <!-- Các hàng sản phẩm trong giỏ hàng sẽ được thêm bằng JavaScript -->\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"form-container\">\r\n");
      out.write("        <form action=\"RestaurantOrder\" method=\"post\">\r\n");
      out.write("            <h2>Receipt</h2>\r\n");
      out.write("            <div class=\"receipt-input\">\r\n");
      out.write("                <label for=\"total\">Total:</label>\r\n");
      out.write("                <input type=\"text\" id=\"total\" name=\"total\" readonly>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"receipt-input\">\r\n");
      out.write("                <label for=\"amount\">Amount:</label>\r\n");
      out.write("                <input type=\"text\" id=\"amount\" name=\"amount\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"receipt-input\">\r\n");
      out.write("                <label for=\"change\">Change:</label>\r\n");
      out.write("                <input type=\"text\" id=\"change\" name=\"change\" readonly>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"submit-btn-container\">\r\n");
      out.write("                <button type=\"submit\" onclick=\"order(event)\">Submit</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("  <!--    <button class=\"logout-btn\" onclick=\"logout()\">Logout</button>-->\r\n");
      out.write("\r\n");
      out.write("<form action=\"LogoutServlet\" method=\"post\">\r\n");
      out.write("        <input class=\"logout-btn\" type=\"submit\" value=\"Logout\" />\r\n");
      out.write("    </form>\r\n");
      out.write("	<script>\r\n");
      out.write("	  function filterProducts() {\r\n");
      out.write("          var productName = document.getElementById('productName').value.toLowerCase();\r\n");
      out.write("          var productType = document.getElementById('productType').value.toLowerCase();\r\n");
      out.write("          var minPrice = document.getElementById('minPrice').value;\r\n");
      out.write("          var maxPrice = document.getElementById('maxPrice').value;\r\n");
      out.write("          \r\n");
      out.write("          var rows = document.querySelectorAll('#productTable tr:not(:first-child)');\r\n");
      out.write("          \r\n");
      out.write("          rows.forEach(function(row) {\r\n");
      out.write("              var name = row.cells[1].innerText.toLowerCase();\r\n");
      out.write("              var type = row.cells[3].innerText.toLowerCase();\r\n");
      out.write("              var price = parseFloat(row.cells[2].innerText);\r\n");
      out.write("              \r\n");
      out.write("              var matches = true;\r\n");
      out.write("              \r\n");
      out.write("              if (productName && !name.includes(productName)) {\r\n");
      out.write("                  matches = false;\r\n");
      out.write("              }\r\n");
      out.write("              \r\n");
      out.write("              if (productType && !type.includes(productType)) {\r\n");
      out.write("                  matches = false;\r\n");
      out.write("              }\r\n");
      out.write("              \r\n");
      out.write("              if (minPrice && price < parseFloat(minPrice)) {\r\n");
      out.write("                  matches = false;\r\n");
      out.write("              }\r\n");
      out.write("              \r\n");
      out.write("              if (maxPrice && price > parseFloat(maxPrice)) {\r\n");
      out.write("                  matches = false;\r\n");
      out.write("              }\r\n");
      out.write("              \r\n");
      out.write("              if (matches) {\r\n");
      out.write("                  row.style.display = '';\r\n");
      out.write("              } else {\r\n");
      out.write("                  row.style.display = 'none';\r\n");
      out.write("              }\r\n");
      out.write("          });\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      function resetProducts() {\r\n");
      out.write("          document.getElementById('productName').value = '';\r\n");
      out.write("          document.getElementById('productType').value = '';\r\n");
      out.write("          document.getElementById('minPrice').value = '';\r\n");
      out.write("          document.getElementById('maxPrice').value = '';\r\n");
      out.write("          \r\n");
      out.write("          var rows = document.querySelectorAll('#productTable tr:not(:first-child)');\r\n");
      out.write("          rows.forEach(function(row) {\r\n");
      out.write("              row.style.display = '';\r\n");
      out.write("          });\r\n");
      out.write("      }\r\n");
      out.write("		function addItem(button) {			\r\n");
      out.write("		    var customerName = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.customerName}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("		    if (!customerName || customerName.trim() === \"\") {\r\n");
      out.write("		        alert(\"Please log in to continue.\");\r\n");
      out.write("		        return;\r\n");
      out.write("		    }\r\n");
      out.write("			\r\n");
      out.write("			// Get the row of the clicked button\r\n");
      out.write("			var row = button.parentNode.parentNode;\r\n");
      out.write("			// Get product information from the row\r\n");
      out.write("			var productId = row.cells[0].innerText;\r\n");
      out.write("			var productName = row.cells[1].innerText;\r\n");
      out.write("			var price = row.cells[2].innerText;\r\n");
      out.write("			var type = row.cells[3].innerText;\r\n");
      out.write("			var quantityInput = row.cells[5].querySelector(\"input\");\r\n");
      out.write("			var quantity = parseInt(quantityInput.value);\r\n");
      out.write("			// Check if the quantity is a valid number\r\n");
      out.write("			if (isNaN(quantity) || quantity <= 0) {\r\n");
      out.write("				alert('Please enter a valid quantity.');\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			// Check if the quantity exceeds the available stock\r\n");
      out.write("			var availableStock = parseInt(row.cells[4].innerText);\r\n");
      out.write("			if (quantity > availableStock) {\r\n");
      out.write("				alert('Quantity exceeds available stock.');\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			// Calculate total price for the selected quantity\r\n");
      out.write("			var unitPrice =price;\r\n");
      out.write("			var total = unitPrice * quantity;\r\n");
      out.write("			// Add product to cart\r\n");
      out.write("			var cartTable = document.getElementById(\"cartTable\");\r\n");
      out.write("			var newRow = cartTable.insertRow();\r\n");
      out.write("\r\n");
      out.write("			var cell0 = newRow.insertCell(0);\r\n");
      out.write("			var cell1 = newRow.insertCell(1);\r\n");
      out.write("			var cell2 = newRow.insertCell(2);\r\n");
      out.write("			var cell3 = newRow.insertCell(3);\r\n");
      out.write("			var cell4 = newRow.insertCell(4);\r\n");
      out.write("			var cell5 = newRow.insertCell(5); // New cell for delete button\r\n");
      out.write("\r\n");
      out.write("			cell0.innerText = productId;\r\n");
      out.write("			cell1.innerText = productName;\r\n");
      out.write("			cell2.innerText = type;\r\n");
      out.write("			cell3.innerText = quantity;\r\n");
      out.write("			cell4.innerText = total.toLocaleString().replace(\".\", \"\") + \" $\";\r\n");
      out.write("			// Create delete button\r\n");
      out.write("			var deleteButton = document.createElement(\"button\");\r\n");
      out.write("			deleteButton.innerHTML = \"Delete\";\r\n");
      out.write("			deleteButton.onclick = function() {\r\n");
      out.write("				deleteRow(this);\r\n");
      out.write("			};\r\n");
      out.write("			cell5.appendChild(deleteButton);\r\n");
      out.write("			updateTotal(); // Gọi updateTotal() sau khi thêm sản phẩm vào giỏ hàng\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function deleteRow(button) {\r\n");
      out.write("			var row = button.parentNode.parentNode;\r\n");
      out.write("			row.parentNode.removeChild(row);\r\n");
      out.write("			updateTotal();\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function updateTotal() {\r\n");
      out.write("			var cartTable = document.getElementById(\"cartTable\");\r\n");
      out.write("			var rows = cartTable.rows;\r\n");
      out.write("			var total = 0;\r\n");
      out.write("			// Lặp qua các hàng trong giỏ hàng\r\n");
      out.write("			for (var i = 1; i < rows.length; i++) {\r\n");
      out.write("				var rowTotal = rows[i].cells[4].innerText;\r\n");
      out.write("				total += parseFloat(rowTotal.replace(\" $\", \"\"));\r\n");
      out.write("			}\r\n");
      out.write("			// Cập nhật tổng vào thẻ input có id là \"total\"\r\n");
      out.write("			document.getElementById(\"total\").value = total.toLocaleString().replace(\".\", \"\")\r\n");
      out.write("					+ \" $\";\r\n");
      out.write("		}\r\n");
      out.write("// BTN ORDER\r\n");
      out.write("\r\n");
      out.write("		function order(event) {\r\n");
      out.write("		    event.preventDefault(); // Ngăn chặn form submit tự động\r\n");
      out.write("\r\n");
      out.write("		    // Hiển thị cửa sổ xác nhận\r\n");
      out.write("		    if (confirm(\"Are you sure you want to place this order?\")) {\r\n");
      out.write("		    	// Thu thập dữ liệu từ bảng giỏ hàng\r\n");
      out.write("				var cartTable = document.getElementById(\"cartTable\");\r\n");
      out.write("				var cartData = [];\r\n");
      out.write("				for (var i = 1; i < cartTable.rows.length; i++) {\r\n");
      out.write("					var rowData = {};\r\n");
      out.write("					rowData[\"prodId\"] = cartTable.rows[i].cells[0].innerText;\r\n");
      out.write("					rowData[\"productName\"] = cartTable.rows[i].cells[1].innerText;\r\n");
      out.write("					rowData[\"type\"] = cartTable.rows[i].cells[2].innerText;\r\n");
      out.write("					rowData[\"quantity\"] = cartTable.rows[i].cells[3].innerText;\r\n");
      out.write("					rowData[\"price\"] = cartTable.rows[i].cells[4].innerText;\r\n");
      out.write("					cartData.push(rowData);\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				// Thu thập dữ liệu từ form receipt\r\n");
      out.write("				var totalText = document.getElementById(\"total\").value;\r\n");
      out.write("				var total = parseFloat(totalText.replace(\" $\", \"\").replace(\",\", \"\"));\r\n");
      out.write("				var amount = parseFloat(document.getElementById(\"amount\").value);\r\n");
      out.write("				var change = amount - total;\r\n");
      out.write("				if (isNaN(amount) || isNaN(change) || change < 0) {\r\n");
      out.write("					alert(\"Invalid payment amount!\");\r\n");
      out.write("					return; // Ngăn chặn gửi dữ liệu nếu dữ liệu không hợp lệ\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				// Hiển thị số tiền thừa trực tiếp lên ô input \"change\"\r\n");
      out.write("				document.getElementById(\"change\").value = change.toLocaleString()\r\n");
      out.write("						+ \" $\";\r\n");
      out.write("\r\n");
      out.write("				// Tạo một object chứa dữ liệu từ bảng và form\r\n");
      out.write("				var postData = {\r\n");
      out.write("					\"cartData\" : cartData,\r\n");
      out.write("					\"total\" : total,\r\n");
      out.write("					\"amount\" : amount,\r\n");
      out.write("					\"change\" : change\r\n");
      out.write("				};\r\n");
      out.write("\r\n");
      out.write("				// Chuyển dữ liệu thành chuỗi JSON\r\n");
      out.write("				var jsonData = JSON.stringify(postData);\r\n");
      out.write("\r\n");
      out.write("				// Tạo một request AJAX\r\n");
      out.write("				var xhr = new XMLHttpRequest();\r\n");
      out.write("				xhr.open(\"POST\", \"RestaurantOrder\", true);\r\n");
      out.write("				xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n");
      out.write("				xhr.onreadystatechange = function() {\r\n");
      out.write("					if (xhr.readyState === XMLHttpRequest.DONE) {\r\n");
      out.write("						if (xhr.status === 200) {\r\n");
      out.write("							console.log(\"Data sent successfully!\");		\r\n");
      out.write("							// window.location.reload(true);\r\n");
      out.write("							resetPage(); \r\n");
      out.write("						} else {\r\n");
      out.write("							alert(\"An error occurred: \" + xhr.statusText);\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				};\r\n");
      out.write("				xhr.send(jsonData);\r\n");
      out.write("				\r\n");
      out.write("		    } else {		       \r\n");
      out.write("		        return;\r\n");
      out.write("		    }\r\n");
      out.write("		}\r\n");
      out.write("		function resetPage() {\r\n");
      out.write("		    // Hiển thị thông báo trên console\r\n");
      out.write("		     alert(\"Order successfully placed!\"); // Hiển thị thông báo thành công\r\n");
      out.write("\r\n");
      out.write("		    // Reset lại trang\r\n");
      out.write("		    window.location.reload(true);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("// Logout\r\n");
      out.write("		 function logout() {\r\n");
      out.write("	            var xhr = new XMLHttpRequest();\r\n");
      out.write("	            xhr.open(\"GET\", \"");
      out.print( request.getContextPath() );
      out.write("/logout\", true);\r\n");
      out.write("	            xhr.onreadystatechange = function() {\r\n");
      out.write("	                if (xhr.readyState === XMLHttpRequest.DONE) {\r\n");
      out.write("	                    if (xhr.status === 200) {\r\n");
      out.write("\r\n");
      out.write("	                    } else {\r\n");
      out.write("	                        console.error(\"Logout failed: \" + xhr.status + \" \" + xhr.statusText);\r\n");
      out.write("	                    }\r\n");
      out.write("	                }\r\n");
      out.write("	            };\r\n");
      out.write("	            xhr.send();\r\n");
      out.write("	        }\r\n");
      out.write(" \r\n");
      out.write("// HIEN THI BTN LOGIN, REGISTER, LOGOUT\r\n");
      out.write("        window.onload = function() {\r\n");
      out.write("            // Lấy giá trị của customerName từ session\r\n");
      out.write("            var customerName = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.customerName}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("            // Lấy các button login, register và logout\r\n");
      out.write("            var loginBtn = document.querySelector('.auth-buttons a[href=\"Login\"]');\r\n");
      out.write("            var registerBtn = document.querySelector('.auth-buttons a[href=\"Register\"]');\r\n");
      out.write("            var logoutBtn = document.querySelector('.logout-btn');\r\n");
      out.write("\r\n");
      out.write("            // Nếu customerName không rỗng, hiện nút logout và ẩn nút login và register\r\n");
      out.write("            if (customerName && customerName.trim() !== \"\") {\r\n");
      out.write("                logoutBtn.style.display = \"block\";\r\n");
      out.write("                loginBtn.style.display = \"none\";\r\n");
      out.write("                registerBtn.style.display = \"none\";\r\n");
      out.write("            } else { // Nếu customerName rỗng, hiện nút login và register và ẩn nút logout\r\n");
      out.write("                logoutBtn.style.display = \"none\";\r\n");
      out.write("                loginBtn.style.display = \"block\";\r\n");
      out.write("                registerBtn.style.display = \"block\";\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("        \r\n");
      out.write("        function clearOrderForm() {\r\n");
      out.write("            // Xóa nội dung của bảng cartTable\r\n");
      out.write("            var cartTable = document.getElementById(\"cartTable\");\r\n");
      out.write("            while (cartTable.rows.length > 1) {\r\n");
      out.write("                cartTable.deleteRow(1);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Xóa nội dung trong các trường của form\r\n");
      out.write("            document.getElementById(\"total\").value = \"\";\r\n");
      out.write("            document.getElementById(\"amount\").value = \"\";\r\n");
      out.write("            document.getElementById(\"change\").value = \"\";\r\n");
      out.write("        }\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /views/Restaurant.jsp(189,8) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/views/Restaurant.jsp(189,8) '${productList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${productList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /views/Restaurant.jsp(189,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("product");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("            <tr>\r\n");
            out.write("                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${product.productID }", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${product.productName}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${product.price}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${product.type}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${product.stock}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("                <td><input type=\"number\" class=\"quantity-input\" value=\"0\" min=\"0\"></td>\r\n");
            out.write("                <td class=\"add-btn-container\"><button onclick=\"addItem(this)\">Add</button></td>\r\n");
            out.write("            </tr>\r\n");
            out.write("        ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
